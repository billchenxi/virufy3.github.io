{"version":3,"sources":["hooks/useHeaderContext.ts","helper/scrollHelper.ts","utils/wizard.ts","components/Button/style.ts","components/Button/Button.tsx","components/WizardButtons/style.ts","components/WizardButtons/WizardButtons.tsx","hooks/useAxios.ts","containers/SubmitSteps/Submission/PredictionResult/PredictionResult.tsx"],"names":["useHeaderContext","React","useContext","HeaderContext","title","setTitle","setDoGoBack","doGoBack","scrollToTop","window","scrollTo","top","behavior","updateAction","storeKey","state","payload","resetStore","welcome","language","StyledButton","styled","button","dark","color","disabled","colors","midGray","darkBlack","white","Button","memo","children","props","type","WizardButtonsContainer","div","theme","layout","generalPaddingAmount","breakpoints","tablet","WizardButtons","invert","leftLabel","leftDisabled","leftHandler","rightLabel","rightDisabled","rightHandler","onClick","client","axios","create","baseURL","process","PredictionResult","Portal","usePortal","bindTo","document","getElementById","history","useHistory","t","useTranslation","useStateMachine","actions","axiosClient","useState","submitError","setSubmitError","processing","setProcessing","likelihood","setLikelihood","useEffect","target","style","display","handleStartAgain","useCallback","replace","handleSubmit","a","hospitalCode","patientId","recordYourCough","body","FormData","append","recordingFile","uploadedFile","post","headers","response","data","console","log","setTimeout","Trans","i18nKey","Link","to"],"mappings":"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","file":"static/js/22.ec64a44c.chunk.js","sourcesContent":["import React from 'react';\nimport { HeaderContext } from 'components/Header';\n\nconst useHeaderContext = () => {\n  const {\n    title, setTitle, setDoGoBack, doGoBack,\n  } = React.useContext(HeaderContext);\n\n  return {\n    title,\n    setTitle,\n    doGoBack,\n    setDoGoBack,\n  };\n};\n\nexport default useHeaderContext;\n","export const scrollToTop = function scrollToTop() {\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n};\n\nexport const scrollToBottom = function scrollToBottom() {\n  window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n};\n","// TODO: Improve types\nexport function updateAction(storeKey: string): any {\n  return (state: any, payload: any) => ({\n    ...state,\n    [storeKey]: {\n      ...state[storeKey],\n      ...payload,\n    },\n  });\n}\n\nexport function resetStore(): any {\n  return (state: any) => ({ welcome: { language: state.welcome.language } });\n}\n","import styled from 'styled-components';\nimport { colors } from '../../theme';\n\nexport interface StyledButtonProps {\n  disabled?: boolean;\n  dark?: boolean;\n  id?: string;\n}\n\nexport const StyledButton = styled.button<StyledButtonProps>`\n  height: 50px;\n  border-radius: 4px; \n  font-family: 'Source Sans Pro'; /* It could be removed if default on body changes */\n  font-weight: bold;\n  font-size: 14px;\n  font-weight: bold;\n  width: 100%;\n\n  ${({ dark, disabled }) => {\n    const color = disabled ? colors.midGray : colors.darkBlack;\n    return dark ? `\n    background-color: ${color};\n    color: ${colors.white};\n    border: none;\n  ` : `\n    background-color: ${colors.white};\n    color: ${color};\n    border: 1px solid ${color};\n  `;\n  }}\n`;\n","import React, { PropsWithChildren } from 'react';\n\n// Styles\nimport {\n  StyledButton,\n  StyledButtonProps,\n} from './style';\n\nexport interface ButtonProps extends PropsWithChildren<StyledButtonProps> {\n  onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void);\n}\n\nconst Button = React.memo(({ children, ...props }: ButtonProps) => ((\n  <StyledButton\n    type=\"button\"\n    {...props}\n  >\n    {children}\n  </StyledButton>\n)));\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const WizardButtonsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-width: ${props => `calc(100% - ${props.theme.layout.generalPaddingAmount * 2}px)`};\n  margin: 0 auto;\n\n  button {\n    flex: 1;\n\n    &:first-of-type {\n      margin-left: 0px !important;\n    }\n\n    &:last-of-type {\n      margin-left: 20px;\n    }\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n  }\n`;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\n\n// Components\nimport Button from 'components/Button';\n\n// Styles\nimport {\n  WizardButtonsContainer,\n} from './style';\n\ninterface WizardButtonsProps {\n  invert?: boolean;\n  leftLabel: string;\n  leftDisabled?: boolean;\n  leftHandler: () => void;\n  rightLabel?: string;\n  rightDisabled?: boolean;\n  rightHandler?: () => void;\n}\n\nconst WizardButtons = React.memo(({\n  invert = false,\n  leftLabel,\n  leftDisabled,\n  leftHandler,\n  rightLabel,\n  rightDisabled,\n  rightHandler,\n}: WizardButtonsProps) => (\n  <WizardButtonsContainer>\n    <Button\n      dark={invert}\n      disabled={leftDisabled}\n      onClick={leftHandler}\n    >\n      {leftLabel}\n    </Button>\n    {\n        rightLabel && rightHandler && (\n          <Button\n            dark={!invert}\n            disabled={rightDisabled}\n            onClick={rightHandler}\n          >\n            {rightLabel}\n          </Button>\n        )\n      }\n  </WizardButtonsContainer>\n));\nexport default React.memo(WizardButtons);\n","import axios from 'axios';\n\nconst client = axios.create({\n  baseURL: process.env.REACT_APP_API,\n});\n\nexport default function useAxios() {\n  return client;\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation, Trans } from 'react-i18next';\n\n// Form\nimport { useStateMachine } from 'little-state-machine';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\nimport Link from 'components/Link';\n\n// Hooks\nimport useAxios from 'hooks/useAxios';\n\n// Update Action\nimport { resetStore } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\n\n// Styles\nimport {\n  Title,\n  ImageProcessing,\n  ProcessingContainer,\n  PredictionResultContainer,\n  TitleResult,\n  ImagePredictionResult,\n  LikelihoodText,\n  LikelihoodPercentageText,\n  SubmitError,\n  IntroText,\n} from './style';\n\nconst PredictionResult = () => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, actions } = useStateMachine({ resetStore: resetStore() });\n  const axiosClient = useAxios();\n\n  // States\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [processing, setProcessing] = React.useState<boolean>(true);\n  const [likelihood, setLikelihood] = React.useState<string>();\n\n  React.useEffect(() => {\n    // Hide the Footer Report Problems while processing\n    const target = document && document.getElementById('footer-report-problems');\n    if (target) {\n      if (processing) {\n        target.style.display = 'none';\n      } else {\n        target.style.display = 'flex';\n      }\n    }\n  }, [processing]);\n\n  // Effects\n  React.useEffect(() => {\n    scrollToTop();\n    setTitle('');\n    setDoGoBack(() => {});\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Handlers\n  const handleStartAgain = React.useCallback(() => {\n    history.replace('');\n  }, [history]);\n\n  const handleSubmit = async () => {\n    try {\n      setSubmitError(null);\n      if (state && state.welcome && state['submit-steps']) {\n        const {\n          language,\n          hospitalCode = 'virufy',\n          patientId = 'virufy',\n        } = state.welcome;\n\n        const {\n          recordYourCough,\n        } = state['submit-steps'];\n\n        const body = new FormData();\n\n        // Welcome Screens\n        if (language) {\n          body.append('language', language);\n        }\n        if (hospitalCode) {\n          body.append('hospitalCode', hospitalCode);\n        }\n        if (patientId) {\n          body.append('patientId', patientId);\n        }\n\n        // Records\n        if (recordYourCough?.recordingFile || recordYourCough?.uploadedFile) {\n          body.append('cough', recordYourCough.recordingFile! || recordYourCough.uploadedFile!);\n        }\n\n        const response = await axiosClient.post('saveDemoSurvey', body, {\n          headers: {\n            'Content-Type': 'multipart/form-data; boundary=SaveDemoSurvey',\n          },\n        });\n\n        // Restart\n        actions.resetStore({});\n\n        if (response.data) {\n          console.log(response.data);\n          setProcessing(false);\n          setLikelihood('XX');\n        }\n      } else {\n        // TODO: remove else, just for testing\n        setProcessing(false);\n      }\n    } catch (error) {\n      console.log('Error', error);\n      setSubmitError(t('beforeSubmit:submitError'));\n    }\n  };\n\n  React.useEffect(() => {\n    // TODO: Update this\n    setTimeout(() => {\n      handleSubmit();\n    }, 3000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      {\n        processing ? (\n          <ProcessingContainer>\n            {/* Title */}\n            <Title>\n              {t('predictionResult:processingTitle')}\n            </Title>\n\n            {/* Image */}\n            <ImageProcessing />\n          </ProcessingContainer>\n        ) : (\n          <PredictionResultContainer>\n            {/* Title */}\n            <TitleResult>\n              {t('predictionResult:predictionResultTitle')}\n            </TitleResult>\n\n            <IntroText>\n              <Trans i18nKey=\"main:introductionText\">\n                <strong>Important note:</strong> this app is only for demonstration purposes and does not provide a\n                prediction. Please visit <Link to=\"https://virufy.org/app\" target=\"_blank\">virufy.org/app</Link> to\n                contribute your cough and help us to complete this app.\n              </Trans>\n            </IntroText>\n\n            {/* Likelihood */}\n            {\n              likelihood && (\n                <LikelihoodText>\n                  {t('predictionResult:likelihoodPrefix')}\n                  <LikelihoodPercentageText>\n                    {' '}\n                    {likelihood}%\n                  </LikelihoodPercentageText>\n                </LikelihoodText>\n              )\n            }\n\n            {/* Image */}\n            <ImagePredictionResult />\n          </PredictionResultContainer>\n        )\n      }\n\n      {/* Bottom Buttons */}\n      {\n        submitError && (\n          <SubmitError>\n            {submitError}\n          </SubmitError>\n        )\n      }\n      {\n        !processing && (\n          <Portal>\n            <WizardButtons\n              invert\n              leftLabel={t('predictionResult:nextButton')}\n              leftHandler={handleStartAgain}\n              leftDisabled={false}\n            />\n          </Portal>\n        )\n      }\n    </>\n  );\n};\n\nexport default React.memo(PredictionResult);\n"],"sourceRoot":""}