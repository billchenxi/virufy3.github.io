{"version":3,"sources":["components/Texts/Texts.ts","components/Button/style.ts","components/Button/Button.tsx","components/WizardButtons/style.ts","components/WizardButtons/WizardButtons.tsx","helper/audio/encoder-wav-worker.js","helper/audio/encoder-mp3-worker.js","helper/audio/RecorderService.js","assets/icons/start.svg","components/MicRecorder/style.ts","components/MicRecorder/MicRecorder.tsx","assets/icons/upload.svg","containers/SubmitSteps/RecordingsSteps/Introduction/Record/Record.tsx","assets/icons/stop.svg","containers/SubmitSteps/RecordingsSteps/Introduction/Record/style.ts","helper/fileHelper.ts"],"names":["BaseText","css","BlackText","styled","div","dark","colors","darkBlack","black","props","fontSize","BaseTitle","StyledButton","button","color","disabled","midGray","white","Button","React","memo","children","type","WizardButtonsContainer","theme","layout","generalPaddingAmount","breakpoints","tablet","WizardButtons","invert","leftLabel","leftDisabled","leftHandler","rightLabel","rightDisabled","rightHandler","onClick","recorded","this","onmessage","e","data","buffer","length","Uint8Array","i","index","sample","push","encode","sampleRate","bufferLength","wav","view","DataView","setUint32","setUint16","CHANNELS","set","msg","postMessage","dump","close","mp3encoder","maxSamples","mp3Data","convertBuffer","arrayBuffer","Float32Array","out","Int16Array","input","output","s","Math","max","min","floatTo16BitPCM","opts","samplesMono","remaining","left","subarray","encodeBuffer","mp3buf","flush","importScripts","baseUrl","lamejs","Mp3Encoder","RecorderService","config","cleanup","onRecording","em","removeEventListener","recordingFn","onAudioProcesss","onAudioProcessFn","createWorker","fn","js","toString","replace","blob","Blob","Worker","URL","createObjectURL","startRecording","timeslice","state","navigator","mediaDevices","getUserMedia","audioCtx","AudioContext","micGainNode","createGain","outputGainNode","createDynamicsCompressorNode","dynamicsCompressorNode","createDynamicsCompressor","createAnalyserNode","analyserNode","createAnalyser","forceScriptProcessor","broadcastAudioProcessEvents","usingMediaRecorder","processorNode","createScriptProcessor","processorBufferSize","createMediaStreamDestination","destinationNode","destination","manualEncoderId","encoderWorker","EncoderMp3","document","location","protocol","host","encoderMimeType","EncoderWav","addEventListener","event","Event","_onDataAvailable","userMediaConstraints","audio","echoCancellation","enableEchoCancellation","deviceId","then","stream","_startRecordingWithStream","catch","error","console","log","setMicGain","newGain","micGain","gain","setValueAtTime","currentTime","micAudioStream","inputStreamNode","createMediaStreamSource","context","onGraphSetupWithInputStream","connect","nextNode","onaudioprocess","_onAudioProcess","mediaRecorder","MediaRecorder","mimeType","evt","_onError","start","slicing","setInterval","dispatchEvent","CustomEvent","detail","inputBuffer","outputBuffer","getChannelData","stopRecording","stop","clearInterval","chunks","chunkType","blobUrl","recording","ts","Date","getTime","size","disconnect","stopTracksAndCloseCtxWhenFinished","getTracks","forEach","track","window","webkitAudioContext","createDocumentFragment","undefined","onAudioPress","MicRecorderContainer","MicRecorderButton","lightGray","midDarkGray","MicRecorderImage","img","show","MicRecorderStartImage","MicRecorderStopImage","MicRecorderTimerContainer","realBlack","MicRecorderTimerReleaseTextContainer","red","MicRecorderTextP","p","MicRecorder","className","maxTimeInSeconds","onNewRecord","delay","recordingFile","t","useTranslation","recordingService","useRef","audioSamples","timerRef","timeout","target","useState","micAllowed","setMicAllowed","recordingInProgress","setRecordingInProgress","showReleaseText","setShowReleaseText","showShortRecordingText","setShowShortRecordingText","longPressTriggered","setLongPressTriggered","onAudioProcess","useCallback","current","channel","numberOfChannels","inputData","outputData","onNewRecording","a","fetch","r","file","FileHelper","blobToFile","humanReadableSize","sizeAsHuman","useEffect","Audio","load","listenerFn","setTime","duration","handleStartRecording","reset","handleStopRecording","handleFormatValue","value","preventDefault","handleStartLongPress","passive","setTimeout","handleEndLongPress","clearTimeout","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onMouseLeave","src","StartSVG","alt","StopSVG","ref","startImmediately","checkpoints","time","callback","Minutes","Seconds","formatValue","schema","Yup","required","test","Promise","resolver","defined","Record","onNext","onManualUpload","defaultValues","currentLogic","action","Portal","usePortal","bindTo","getElementById","useForm","mode","yupResolver","handleSubmit","control","getValues","formState","isValid","micKey","Trans","i18nKey","name","render","onChange","uploadedFile","UploadSVG","MainContainer","Text","MicContainer","UploadContainer","UploadImage","UploadText","StopImg","attrs","bytes","si","thresh","abs","units","u","toFixed","theBlob","fileName","b","lastModifiedDate"],"mappings":"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","file":"static/js/4.3b89ca64.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport { colors } from 'theme';\n\nexport const BaseText = css`\n  font-family: 'Source Sans Pro';\n  font-size: 0.875rem;\n  line-height: 20px;\n`;\n\nexport const BlackText = styled.div<{ dark?: boolean; fontSize?: string; }>`\n  ${BaseText}\n  color: ${({ dark }) => (dark ? colors.darkBlack : colors.black)};\n  ${props => (props.fontSize ? `font-size: ${props.fontSize};` : '')}\n`;\n\nexport const BaseTitle = styled.div`\n  font-family: 'Open Sans';\n  font-weight: 700;\n  font-size: 1.5rem;\n  line-height: 34.24px;\n  color: ${colors.darkBlack};\n`;\n","import styled from 'styled-components';\nimport { colors } from '../../theme';\n\nexport interface StyledButtonProps {\n  disabled?: boolean;\n  dark?: boolean;\n  id?: string;\n}\n\nexport const StyledButton = styled.button<StyledButtonProps>`\n  height: 50px;\n  border-radius: 4px; \n  font-family: 'Source Sans Pro'; /* It could be removed if default on body changes */\n  font-weight: bold;\n  font-size: 14px;\n  font-weight: bold;\n  width: 100%;\n\n  ${({ dark, disabled }) => {\n    const color = disabled ? colors.midGray : colors.darkBlack;\n    return dark ? `\n    background-color: ${color};\n    color: ${colors.white};\n    border: none;\n  ` : `\n    background-color: ${colors.white};\n    color: ${color};\n    border: 1px solid ${color};\n  `;\n  }}\n`;\n","import React, { PropsWithChildren } from 'react';\n\n// Styles\nimport {\n  StyledButton,\n  StyledButtonProps,\n} from './style';\n\nexport interface ButtonProps extends PropsWithChildren<StyledButtonProps> {\n  onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void);\n}\n\nconst Button = React.memo(({ children, ...props }: ButtonProps) => ((\n  <StyledButton\n    type=\"button\"\n    {...props}\n  >\n    {children}\n  </StyledButton>\n)));\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const WizardButtonsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-width: ${props => `calc(100% - ${props.theme.layout.generalPaddingAmount * 2}px)`};\n  margin: 0 auto;\n\n  button {\n    flex: 1;\n\n    &:first-of-type {\n      margin-left: 0px !important;\n    }\n\n    &:last-of-type {\n      margin-left: 20px;\n    }\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n  }\n`;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\n\n// Components\nimport Button from 'components/Button';\n\n// Styles\nimport {\n  WizardButtonsContainer,\n} from './style';\n\ninterface WizardButtonsProps {\n  invert?: boolean;\n  leftLabel: string;\n  leftDisabled?: boolean;\n  leftHandler: () => void;\n  rightLabel?: string;\n  rightDisabled?: boolean;\n  rightHandler?: () => void;\n}\n\nconst WizardButtons = React.memo(({\n  invert = false,\n  leftLabel,\n  leftDisabled,\n  leftHandler,\n  rightLabel,\n  rightDisabled,\n  rightHandler,\n}: WizardButtonsProps) => (\n  <WizardButtonsContainer>\n    <Button\n      dark={invert}\n      disabled={leftDisabled}\n      onClick={leftHandler}\n    >\n      {leftLabel}\n    </Button>\n    {\n        rightLabel && rightHandler && (\n          <Button\n            dark={!invert}\n            disabled={rightDisabled}\n            onClick={rightHandler}\n          >\n            {rightLabel}\n          </Button>\n        )\n      }\n  </WizardButtonsContainer>\n));\nexport default React.memo(WizardButtons);\n","/* eslint-disable func-names */\nexport default function () {\n  // Parts copied from https://github.com/chris-rudmin/Recorderjs\n  const BYTES_PER_SAMPLE = 2;\n  const CHANNELS = 1; // 1=mono , 2=Stereo\n  let recorded = [];\n\n  function encode(buffer) {\n    const { length } = buffer;\n    const data = new Uint8Array(length * BYTES_PER_SAMPLE * CHANNELS);\n    for (let i = 0; i < length; i += 1) {\n      const index = i * BYTES_PER_SAMPLE * CHANNELS;\n      let sample = buffer[i];\n      if (sample > 1) {\n        sample = 1;\n      } else if (sample < -1) {\n        sample = -1;\n      }\n      sample *= 32768;\n      data[index] = sample;\n      // eslint-disable-next-line no-bitwise\n      data[index + 1] = sample >> 8;\n    }\n    recorded.push(data);\n  }\n\n  function dump(sampleRate) {\n    const bufferLength = recorded.length ? recorded[0].length : 0;\n    const length = recorded.length * bufferLength;\n    const wav = new Uint8Array(44 + length);\n\n    const view = new DataView(wav.buffer);\n\n    // RIFF identifier 'RIFF'\n    view.setUint32(0, 1380533830, false);\n    // file length minus RIFF identifier length and file description length\n    view.setUint32(4, 36 + length, true);\n    // RIFF type 'WAVE'\n    view.setUint32(8, 1463899717, false);\n    // format chunk identifier 'fmt '\n    view.setUint32(12, 1718449184, false);\n    // format chunk length\n    view.setUint32(16, 16, true);\n    // sample format (raw)\n    view.setUint16(20, 1, true);\n    // channel count\n    view.setUint16(22, CHANNELS, true);\n    // sample rate\n    view.setUint32(24, sampleRate, true); // 44100 Khz\n    // byte rate (channels * sample rate * block align)\n    view.setUint32(28, CHANNELS * sampleRate * BYTES_PER_SAMPLE, true); // kbps = 1411\n    // block align (channel count * bytes per sample)\n    view.setUint16(32, CHANNELS * BYTES_PER_SAMPLE, true);\n    // bits per sample\n    view.setUint16(34, 8 * BYTES_PER_SAMPLE, true); // 16\n    // data chunk identifier 'data'\n    view.setUint32(36, 1684108385, false);\n    // data chunk length\n    view.setUint32(40, length, true);\n\n    for (let i = 0; i < recorded.length; i += 1) {\n      wav.set(recorded[i], i * bufferLength + 44);\n    }\n\n    recorded = [];\n    const msg = [wav.buffer];\n    postMessage(msg, [msg[0]]);\n  }\n\n  this.onmessage = e => {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1]);\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1]);\n    } else if (e.data[0] === 'close') {\n      this.close();\n    }\n  };\n}\n","/* eslint-disable func-names */\n// import 'babel-polyfill'\n// import lamejs from 'lamejs';\n\nexport default function () {\n  // Note that relative paths don't work when loaded as a blob\n  // https://stackoverflow.com/questions/22172426/using-importsscripts-within-blob-in-a-karma-environment\n  // importScripts('https://localhost:8443/workers/encoders/lame.js') // eslint-disable-line\n\n  const channels = 1; // 1 for mono or 2 for stereo\n  // let sampleRate = 44100 // 44.1khz (normal mp3 samplerate)\n  const kbps = 128; // encode 128kbps mp3\n\n  let mp3encoder = null;\n\n  const maxSamples = 1152;\n\n  let mp3Data = []; // array of Uint8Array\n\n  function init(opts) {\n    /* global lamejs */\n    importScripts(opts.baseUrl + '/workers/encoders/lame.min.js'); // eslint-disable-line\n    mp3encoder = new lamejs.Mp3Encoder(channels, opts.sampleRate, kbps);\n  }\n\n  function floatTo16BitPCM(input, output) {\n    for (let i = 0; i < input.length; i += 1) {\n      const s = Math.max(-1, Math.min(1, input[i]));\n      // eslint-disable-next-line no-param-reassign\n      output[i] = (s < 0 ? s * 0x8000 : s * 0x7FFF);\n    }\n  }\n\n  function convertBuffer(arrayBuffer) {\n    const data = new Float32Array(arrayBuffer);\n    const out = new Int16Array(arrayBuffer.length);\n    floatTo16BitPCM(data, out);\n    return out;\n  }\n\n  function encode(arrayBuffer) {\n    const samplesMono = convertBuffer(arrayBuffer);\n    let remaining = samplesMono.length;\n    for (let i = 0; remaining >= 0; i += maxSamples) {\n      const left = samplesMono.subarray(i, i + maxSamples);\n      const data = mp3encoder.encodeBuffer(left);\n      mp3Data.push(data);\n      remaining -= maxSamples;\n    }\n\n    // var mp3buf = mp3encoder.encodeBuffer(buffer)\n    // if (mp3buf.length > 0) {\n    //   mp3Data.push(mp3buf)\n    // }\n  }\n\n  function dump() {\n    const mp3buf = mp3encoder.flush();\n    if (mp3buf.length > 0) {\n      mp3Data.push(mp3buf);\n    }\n\n    // Probably results in native memory copy\n    postMessage(mp3Data);\n\n    // Would like to do this, but not possible because mp3Data is generic array of Uint8Array, and generic\n    // arrays are not transferrable types.\n    // postMessage(mp3Data, [mp3Data])\n\n    // This might help if/when ever become available again\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer\n\n    // For now, though, we have not other option except to build a complete copy in javascript. This means\n    // we temporarily require twice the memory of whatever was recorded.\n\n    mp3Data = [];\n  }\n\n  onmessage = function onmessage(e) {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1]);\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1]);\n    } else if (e.data[0] === 'init') {\n      init(e.data[1]);\n    } else if (e.data[0] === 'close') {\n      this.close();\n    }\n  };\n}\n","/* eslint-disable max-len */\n/* eslint-disable consistent-return */\n/* eslint-disable no-underscore-dangle */\n// Vendor Library https://github.com/mogwai/pwa-audio-recorder/tree/master\n\nimport EncoderWav from './encoder-wav-worker';\nimport EncoderMp3 from './encoder-mp3-worker';\n// import EncoderOgg from './encoder-ogg-worker';\n\nexport default class RecorderService {\n  constructor(config) {\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n    this.em = document.createDocumentFragment();\n\n    this.state = 'inactive';\n\n    this.chunks = [];\n    this.chunkType = '';\n\n    this.encoderMimeType = 'audio/wav';\n\n    this.config = {\n      broadcastAudioProcessEvents: config.broadcastAudioProcessEvents !== undefined ? config.broadcastAudioProcessEvents : false,\n      createAnalyserNode: config.createAnalyserNode !== undefined ? config.createAnalyserNode : false,\n      createDynamicsCompressorNode: config.createDynamicsCompressorNode !== undefined ? config.createDynamicsCompressorNode : false,\n      forceScriptProcessor: config.forceScriptProcessor !== undefined ? config.forceScriptProcessor : false,\n      manualEncoderId: config.manualEncoderId !== undefined ? config.manualEncoderId : 'wav',\n      micGain: config.micGain !== undefined ? config.micGain : 1.0,\n      processorBufferSize: config.processorBufferSize !== undefined ? config.processorBufferSize : 2048,\n      stopTracksAndCloseCtxWhenFinished: config.stopTracksAndCloseCtxWhenFinished !== undefined ? config.stopTracksAndCloseCtxWhenFinished : true,\n      usingMediaRecorder: config.usingMediaRecorder !== undefined ? config.usingMediaRecorder : typeof window.MediaRecorder !== 'undefined',\n      enableEchoCancellation: config.enableEchoCancellation !== undefined ? config.enableEchoCancellation : true,\n      sampleRate: config.sampleRate !== undefined ? config.sampleRate : 44100,\n      onRecording: config.onRecording,\n      onAudioPress: config.onAudioPress,\n    };\n\n    if (config.onRecording) {\n      this.recordingFn = evt => config.onRecording(evt);\n      this.em.addEventListener('recording', this.recordingFn);\n    }\n    if (config.onAudioProcesss) {\n      this.onAudioProcessFn = evt => config.onAudioProcesss(evt);\n      this.em.addEventListener('onaudioprocess', this.onAudioProcessFn);\n    }\n  }\n\n  cleanup = () => {\n    if (this.config.onRecording) {\n      this.em.removeEventListener('recording', this.recordingFn);\n    }\n    if (this.config.onAudioProcesss) {\n      this.em.removeEventListener('onaudioprocess', this.onAudioProcessFn);\n    }\n  };\n\n  createWorker = fn => {\n    const js = fn\n      .toString()\n      .replace(/^function\\s*\\(\\)\\s*{/, '')\n      .replace(/}$/, '');\n    const blob = new Blob([js]);\n    return new Worker(URL.createObjectURL(blob));\n  };\n\n  startRecording = timeslice => {\n    if (this.state !== 'inactive') {\n      return;\n    }\n\n    // This is the case on ios/chrome, when clicking links from within ios/slack (sometimes), etc.\n    if (\n      !navigator\n      || !navigator.mediaDevices\n      || !navigator.mediaDevices.getUserMedia\n    ) {\n      // alert('Missing support for navigator.mediaDevices.getUserMedia'); // temp: helps when testing for strange issues on ios/safari\n      return;\n    }\n\n    this.audioCtx = new AudioContext({\n      sampleRate: this.config.sampleRate,\n    });\n    this.micGainNode = this.audioCtx.createGain();\n    this.outputGainNode = this.audioCtx.createGain();\n\n    if (this.config.createDynamicsCompressorNode) {\n      this.dynamicsCompressorNode = this.audioCtx.createDynamicsCompressor();\n    }\n\n    if (this.config.createAnalyserNode) {\n      this.analyserNode = this.audioCtx.createAnalyser();\n    }\n\n    // If not using MediaRecorder(i.e. safari and edge), then a script processor is required. It's optional\n    // on browsers using MediaRecorder and is only useful if wanting to do custom analysis or manipulation of\n    // recorded audio data.\n    if (\n      this.config.forceScriptProcessor\n      || this.config.broadcastAudioProcessEvents\n      || !this.config.usingMediaRecorder\n    ) {\n      this.processorNode = this.audioCtx.createScriptProcessor(\n        this.config.processorBufferSize,\n        1,\n        1,\n      ); // TODO: Get the number of channels from mic\n    }\n\n    // Create stream destination on chrome/firefox because, AFAICT, we have no other way of feeding audio graph output\n    // in to MediaRecorderSafari/Edge don't have this method as of 2018-04.\n    if (this.audioCtx.createMediaStreamDestination) {\n      this.destinationNode = this.audioCtx.createMediaStreamDestination();\n    } else {\n      this.destinationNode = this.audioCtx.destination;\n    }\n\n    // Create web worker for doing the encoding\n    if (!this.config.usingMediaRecorder) {\n      if (this.config.manualEncoderId === 'mp3') {\n        this.encoderWorker = this.createWorker(EncoderMp3);\n        const baseUrl = `${document.location.protocol}//${document.location.host}`;\n        this.encoderWorker.postMessage([\n          'init',\n          { baseUrl, sampleRate: this.audioCtx.sampleRate },\n        ]);\n        this.encoderMimeType = 'audio/mpeg';\n      } else {\n        this.encoderWorker = this.createWorker(EncoderWav);\n        this.encoderMimeType = 'audio/wav';\n      }\n      this.encoderWorker.addEventListener('message', e => {\n        const event = new Event('dataavailable');\n        if (this.config.manualEncoderId === 'ogg') {\n          event.data = e.data;\n        } else {\n          event.data = new Blob(e.data, { type: this.encoderMimeType });\n        }\n        this._onDataAvailable(event);\n      });\n    }\n\n    // Setup media constraints\n    const userMediaConstraints = {\n      audio: {\n        echoCancellation: this.config.enableEchoCancellation,\n      },\n    };\n    if (this.config.deviceId) {\n      userMediaConstraints.audio.deviceId = this.config.deviceId;\n    }\n\n    // This will prompt user for permission if needed\n    return navigator.mediaDevices\n      .getUserMedia(userMediaConstraints)\n      .then(stream => {\n        this._startRecordingWithStream(stream, timeslice);\n      })\n      .catch(error => {\n        // alert(`Error with getUserMedia: ${error.message}`); // temp: helps when testing for strange issues on ios/safari\n        console.log(error);\n      });\n  };\n\n  setMicGain = newGain => {\n    this.config.micGain = newGain;\n    if (this.audioCtx && this.micGainNode) {\n      this.micGainNode.gain.setValueAtTime(newGain, this.audioCtx.currentTime);\n    }\n  };\n\n  _startRecordingWithStream = (stream, timeslice) => {\n    this.micAudioStream = stream;\n\n    this.inputStreamNode = this.audioCtx.createMediaStreamSource(\n      this.micAudioStream,\n    );\n    this.audioCtx = this.inputStreamNode.context;\n\n    // Kind-of a hack to allow hooking in to audioGraph inputStreamNode\n    if (this.onGraphSetupWithInputStream) {\n      this.onGraphSetupWithInputStream(this.inputStreamNode);\n    }\n\n    this.inputStreamNode.connect(this.micGainNode);\n    this.micGainNode.gain.setValueAtTime(\n      this.config.micGain,\n      this.audioCtx.currentTime,\n    );\n\n    let nextNode = this.micGainNode;\n    if (this.dynamicsCompressorNode) {\n      this.micGainNode.connect(this.dynamicsCompressorNode);\n      nextNode = this.dynamicsCompressorNode;\n    }\n\n    this.state = 'recording';\n\n    if (this.processorNode) {\n      nextNode.connect(this.processorNode);\n      this.processorNode.connect(this.outputGainNode);\n      this.processorNode.onaudioprocess = e => this._onAudioProcess(e);\n    } else {\n      nextNode.connect(this.outputGainNode);\n    }\n\n    if (this.analyserNode) {\n      // TODO: If we want the analyser node to receive the processorNode's output, this needs to be changed _and_\n      //       processor node needs to be modified to copy input to output. It currently doesn't because it's not\n      //       needed when doing manual encoding.\n      // this.processorNode.connect(this.analyserNode)\n      nextNode.connect(this.analyserNode);\n    }\n\n    this.outputGainNode.connect(this.destinationNode);\n\n    if (this.config.usingMediaRecorder) {\n      this.mediaRecorder = new MediaRecorder(this.destinationNode.stream, { mimeType: 'audio/wav' });\n      this.mediaRecorder.addEventListener('dataavailable', evt => this._onDataAvailable(evt));\n      this.mediaRecorder.addEventListener('error', evt => this._onError(evt));\n\n      this.mediaRecorder.start(timeslice);\n    } else {\n      // Output gain to zero to prevent feedback. Seems to matter only on Edge, though seems like should matter\n      // on iOS too.  Matters on chrome when connecting graph to directly to audioCtx.destination, but we are\n      // not able to do that when using MediaRecorder.\n      this.outputGainNode.gain.setValueAtTime(0, this.audioCtx.currentTime);\n      // this.outputGainNode.gain.value = 0\n\n      // Todo: Note that time slicing with manual wav encoderWav won't work. To allow it would require rewriting the encoderWav\n      // to assemble all chunks at end instead of adding header to each chunk.\n      if (timeslice) {\n        console.log(\n          'Time slicing without MediaRecorder is not yet supported. The resulting recording will not be playable.',\n        );\n        this.slicing = setInterval(function anon() {\n          if (this.state === 'recording') {\n            this.encoderWorker.postMessage(['dump', this.context.sampleRate]);\n          }\n        }, timeslice);\n      }\n    }\n  };\n\n  _onAudioProcess = e => {\n    // console.log('onaudioprocess', e)\n    // let inputBuffer = e.inputBuffer\n    // let outputBuffer = e.outputBuffer\n    // console.log(this.micAudioStream)\n    // console.log(this.audioCtx)\n    // console.log(this.micAudioStream.getTracks().forEach((track) => console.log(track)))\n\n    // this.onAudioEm.dispatch(new Event('onaudioprocess', {inputBuffer:inputBuffer,outputBuffer:outputBuffer}))\n\n    if (this.config.broadcastAudioProcessEvents) {\n      this.em.dispatchEvent(\n        new CustomEvent('onaudioprocess', {\n          detail: {\n            inputBuffer: e.inputBuffer,\n            outputBuffer: e.outputBuffer,\n          },\n        }),\n      );\n    }\n\n    // // Example handling:\n    // let inputBuffer = e.inputBuffer\n    // let outputBuffer = e.outputBuffer\n    // // Each channel (usually only one)\n    // for (let channel = 0; channel < outputBuffer.numberOfChannels; channel++) {\n    //   let inputData = inputBuffer.getChannelData(channel)\n    //   let outputData = outputBuffer.getChannelData(channel)\n    //\n    //   // Each sample\n    //   for (let sample = 0; sample < inputBuffer.length; sample++) {\n    //     // Make output equal to the same as the input (thus processor is doing nothing at this time)\n    //     outputData[sample] = inputData[sample]\n    //   }\n    // }\n\n    // When manually encoding (safari/edge), there's no reason to copy data to output buffer.  We set the output\n    // gain to 0 anyways (which is required on Edge if we did copy data to output). However, if using a MediaRecorder\n    // and a processor (all other browsers), then it would be required to copy the data otherwise the graph would\n    // generate no data for the MediaRecorder to consume.\n    // if (this.forceScriptProcessor) {\n\n    // // Copy input to output\n    // let inputBuffer = e.inputBuffer\n    // let outputBuffer = e.outputBuffer\n    // // This doesn't work on iOS/Safari. Guessing it doesn't have copyToChannel support, but haven't verified.\n    // for (let channel = 0; channel < outputBuffer.numberOfChannels; channel++) {\n    //   outputBuffer.copyToChannel(inputBuffer.getChannelData(channel), channel)\n    // }\n\n    // Safari and Edge require manual encoding via web worker. Single channel only for now.\n    // Example stereo encoderWav: https://github.com/MicrosoftEdge/Demos/blob/master/microphone/scripts/recorderworker.js\n    if (!this.config.usingMediaRecorder) {\n      if (this.state === 'recording') {\n        if (this.config.broadcastAudioProcessEvents) {\n          this.encoderWorker.postMessage([\n            'encode',\n            e.outputBuffer.getChannelData(0),\n          ]);\n        } else {\n          this.encoderWorker.postMessage([\n            'encode',\n            e.inputBuffer.getChannelData(0),\n          ]);\n        }\n      }\n    }\n  };\n\n  stopRecording = () => {\n    if (this.state === 'inactive') {\n      return;\n    }\n    if (this.config.usingMediaRecorder) {\n      this.state = 'inactive';\n      this.mediaRecorder.stop();\n    } else {\n      this.state = 'inactive';\n      this.encoderWorker.postMessage(['dump', this.audioCtx.sampleRate]);\n      clearInterval(this.slicing);\n\n      // TODO: There should be a more robust way to handle this\n      // Without something like this, I think  the last recorded sample could be lost due to timing\n      // setTimeout(() => {\n      //   this.state = 'inactive'\n      //   this.encoderWorker.postMessage(['dump', this.audioCtx.sampleRate])\n      // }, 100)\n    }\n  };\n\n  _onDataAvailable = evt => {\n    // console.log('state', this.mediaRecorder.state)\n    // console.log('evt.data', evt.data)\n\n    this.chunks.push(evt.data);\n    this.chunkType = evt.data.type;\n\n    if (this.state !== 'inactive') {\n      return;\n    }\n\n    const blob = new Blob(this.chunks, { type: this.chunkType });\n    const blobUrl = URL.createObjectURL(blob);\n    const recording = {\n      ts: new Date().getTime(),\n      blobUrl,\n      mimeType: blob.type,\n      size: blob.size,\n    };\n\n    this.chunks = [];\n    this.chunkType = null;\n\n    if (this.destinationNode) {\n      this.destinationNode.disconnect();\n      this.destinationNode = null;\n    }\n    if (this.outputGainNode) {\n      this.outputGainNode.disconnect();\n      this.outputGainNode = null;\n    }\n    if (this.analyserNode) {\n      this.analyserNode.disconnect();\n      this.analyserNode = null;\n    }\n    if (this.processorNode) {\n      this.processorNode.disconnect();\n      this.processorNode = null;\n    }\n    if (this.encoderWorker) {\n      this.encoderWorker.postMessage(['close']);\n      this.encoderWorker = null;\n    }\n    if (this.dynamicsCompressorNode) {\n      this.dynamicsCompressorNode.disconnect();\n      this.dynamicsCompressorNode = null;\n    }\n    if (this.micGainNode) {\n      this.micGainNode.disconnect();\n      this.micGainNode = null;\n    }\n    if (this.inputStreamNode) {\n      this.inputStreamNode.disconnect();\n      this.inputStreamNode = null;\n    }\n\n    if (this.config.stopTracksAndCloseCtxWhenFinished) {\n      // This removes the red bar in iOS/Safari\n      this.micAudioStream.getTracks().forEach(track => track.stop());\n      this.micAudioStream = null;\n\n      this.audioCtx.close();\n      this.audioCtx = null;\n    }\n\n    this.em.dispatchEvent(\n      new CustomEvent('recording', { detail: { recording } }),\n    );\n  };\n\n  _onError = evt => {\n    console.log('error', evt);\n    this.em.dispatchEvent(new Event('error'));\n    // alert(`error:${evt}`); // for debugging purposes\n  };\n}\n","export default __webpack_public_path__ + \"static/media/start.bc0449ab.svg\";","import styled from 'styled-components';\nimport { colors } from 'theme';\n\nexport const MicRecorderContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nexport const MicRecorderButton = styled.button`\n  background-color: ${colors.lightGray};\n  width: 180px;\n  height: 180px;\n  position: relative;\n  outline: none !important;\n  border: none;\n  border-radius: 50%;\n  padding: 0;\n  transition: background-color 0.25s;\n\n  @supports not (-webkit-touch-callout: none) {\n    /* CSS for other than iOS devices */\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  &:active {\n    background-color: ${colors.midDarkGray};\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: transparent;\n    z-index: 1;\n    border-radius: 50%;\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}) {\n    width: 275px;\n    height: 275px;\n  }\n`;\n\nexport const MicRecorderImage = styled.img<{ show?: boolean }>`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  opacity: ${props => (props.show ? '1' : '0')};\n  transition: opacity 0.25s;\n`;\n\nexport const MicRecorderStartImage = styled(MicRecorderImage)`\n  width: 51.33px;\n  height: 69.67px;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}) {\n    width: 78.43px;\n    height: 106.44px;\n  }\n`;\n\nexport const MicRecorderStopImage = styled(MicRecorderImage)`\n  width: 44px;\n  height: 51.33px;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}) {\n    width: 53px;\n    height: 61.83px;\n  }\n`;\n\nexport const MicRecorderTimerContainer = styled.div`\n  font-size: 1.25rem;\n  line-height: 28px;\n  color: ${colors.realBlack};\n  margin-top: 20px;\n  font-family: 'Source Sans Pro';\n\n  @media screen and (${props => props.theme.breakpoints.tablet}) {\n    font-size: 1.75rem;\n    line-height: 40px;\n    margin-top: 22px;\n  }\n`;\n\nexport const MicRecorderTimerReleaseTextContainer = styled.div`\n  font-size: 16px;\n  line-height: 20px;\n  color: ${colors.red};\n  font-family: 'Source Sans Pro';\n  display: 'flex';\n`;\n\nexport const MicRecorderTextP = styled.p<{ show?: boolean }>`\n  visibility: ${props => (props.show ? 'flex' : 'hidden')};\n`;\n","/* eslint-disable react/require-default-props */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport Timer from 'react-compound-timer';\nimport { useTranslation } from 'react-i18next';\n// Utils\nimport RecorderService from 'helper/audio/RecorderService';\nimport FileHelper from 'helper/fileHelper';\n\n// Images\nimport StartSVG from 'assets/icons/start.svg';\nimport StopSVG from 'assets/icons/stop.svg';\n\n// Styles\nimport {\n  MicRecorderContainer,\n  MicRecorderButton,\n  MicRecorderStartImage,\n  MicRecorderStopImage,\n  MicRecorderTimerContainer,\n  MicRecorderTimerReleaseTextContainer,\n  MicRecorderTextP,\n} from './style';\n\ninterface MicRecorderProps {\n  className?: string;\n  maxTimeInSeconds?: number;\n  onNewRecord: (file: File, humanReadableSize: string) => void;\n  delay?: number;\n  recordingFile: any;\n}\n\nexport interface RecorderServiceType {\n  config: {\n    broadcastAudioProcessEvents: boolean; // default: false\n    createAnalyserNode: boolean; // default: false\n    createDynamicsCompressorNode: boolean; // default: false\n    forceScriptProcessor: false; // default: false\n    manualEncoderId: string; // default: 'wav'\n    micGain: number; // default: 1.0\n    processorBufferSize: number; // default: 2048\n    stopTracksAndCloseCtxWhenFinished: boolean; // default: true\n    usingMediaRecorder: boolean; // default: typeof window.MediaRecorder !== 'undefined'\n    enableEchoCancellation: boolean; // default: true\n    sampleRate: number; // default: 44100\n  };\n  em: DocumentFragment;\n  startRecording: (timeslice?: number) => Promise<void>;\n  stopRecording: () => void;\n  cleanup: () => void;\n}\n\nconst MicRecorder = ({\n  className = '',\n  maxTimeInSeconds = 30, // 30 segs\n  onNewRecord,\n  delay = 500, // 500ms\n  recordingFile,\n}: MicRecorderProps) => {\n  // Hooks\n  const { t } = useTranslation();\n\n  // Refs\n  const recordingService = React.useRef<RecorderServiceType>();\n  const audioSamples = React.useRef<number>(0);\n  const timerRef = React.useRef<any>();\n  const timeout = React.useRef<NodeJS.Timeout>();\n  const target = React.useRef<HTMLButtonElement>();\n\n  // States\n  const [micAllowed, setMicAllowed] = React.useState<boolean>(true);\n  const [recordingInProgress, setRecordingInProgress] = React.useState<boolean>();\n  const [showReleaseText, setShowReleaseText] = React.useState<boolean>(false);\n  const [showShortRecordingText, setShowShortRecordingText] = React.useState<boolean>(false);\n  const [longPressTriggered, setLongPressTriggered] = React.useState<boolean>(false);\n\n  // Handlers\n  const onAudioProcess = React.useCallback((e: any) => {\n    audioSamples.current += 1;\n    const { inputBuffer, outputBuffer } = e.detail;\n    for (let channel = 0; channel < outputBuffer.numberOfChannels; channel += 1) {\n      const inputData = inputBuffer.getChannelData(channel);\n      const outputData = outputBuffer.getChannelData(channel);\n      // Each sample\n      for (let sample = 0; sample < inputBuffer.length; sample += 1) {\n        outputData[sample] = inputData[sample];\n      }\n    }\n  }, []);\n\n  const onNewRecording = React.useCallback(async (e: any) => {\n    const { detail } = e;\n    const { recording } = detail;\n    const blob = await fetch(recording.blobUrl).then(r => r.blob());\n    const fileName = 'Filename.wav';\n    const file = FileHelper.blobToFile(blob, fileName);\n    const humanReadableSize = FileHelper.sizeAsHuman(file.size, true);\n\n    onNewRecord(file, humanReadableSize);\n  }, [onNewRecord]);\n\n  // Effects\n  React.useEffect(() => {\n    recordingService.current = new RecorderService({\n      usingMediaRecorder: false,\n      sampleRate: 44100, // 44100 // 22050\n      manualEncoderId: 'wav', // wav / mp3\n      onRecording: onNewRecording,\n      onAudioProcesss: onAudioProcess,\n    }) as RecorderServiceType;\n\n    const userMediaConstraints = {\n      audio: {\n        echoCancellation: recordingService.current.config.enableEchoCancellation,\n      },\n    };\n    navigator.mediaDevices.getUserMedia(userMediaConstraints)\n      .then(() => {\n        setMicAllowed(true);\n      })\n      .catch(() => {\n        setMicAllowed(false);\n      });\n\n    if (recordingFile) {\n      const file = recordingFile as File;\n      if (file.size) {\n        const audio = new Audio(URL.createObjectURL(file));\n        audio.load();\n        const listenerFn = () => {\n          timerRef.current?.setTime(audio.duration * 1000);\n          audio.removeEventListener('loadedmetadata', listenerFn);\n        };\n        audio.addEventListener('loadedmetadata', listenerFn);\n      }\n    }\n\n    return () => {\n      if (recordingService.current) {\n        recordingService.current.cleanup();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Handlers\n  const handleStartRecording = React.useCallback(() => {\n    if (recordingService.current) {\n      audioSamples.current = 0;\n      recordingService.current\n        .startRecording()\n        .then(() => {\n          setRecordingInProgress(true);\n          setShowShortRecordingText(false);\n          if (timerRef.current) {\n            timerRef.current.reset();\n            timerRef.current?.setTime(0);\n            timerRef.current.start();\n          }\n        })\n        .catch((error: any) => console.error('ERROR', error));\n    }\n  }, []);\n\n  const handleStopRecording = React.useCallback(() => {\n    if (recordingService.current) {\n      recordingService.current.stopRecording();\n      setRecordingInProgress(false);\n      if (timerRef.current) {\n        if (timerRef.current.getTime() / 1000 < 3) {\n          setShowShortRecordingText(true);\n        }\n        timerRef.current.stop();\n      }\n    }\n  }, []);\n\n  const handleFormatValue = React.useCallback((value: number) => (value < 10 ? `0${value}` : value), []);\n\n  const preventDefault = (event: any) => {\n    if (!('touches' in event)) event.preventDefault();\n  };\n\n  const handleStartLongPress = React.useCallback(\n    event => {\n      if (event.target) {\n        event.target.addEventListener('touchend', preventDefault, {\n          passive: false,\n        });\n        target.current = event.target;\n      }\n      timeout.current = setTimeout(() => {\n        setShowReleaseText(true);\n        setLongPressTriggered(true);\n        setShowShortRecordingText(false);\n      }, delay);\n    },\n    [delay],\n  );\n\n  const handleEndLongPress = React.useCallback(() => {\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n    }\n    if (longPressTriggered) {\n      setShowReleaseText(false);\n    }\n    setLongPressTriggered(false);\n    if (target.current) {\n      target.current.removeEventListener('touchend', preventDefault);\n    }\n  },\n  [longPressTriggered]);\n\n  return (\n    <MicRecorderContainer className={className}>\n      <MicRecorderTimerReleaseTextContainer>\n        {!showShortRecordingText\n          ? (\n            <MicRecorderTextP\n              show={showReleaseText}\n            >\n              {recordingInProgress ? t('recordingsIntroduction:releaseButtonStop') : t('recordingsIntroduction:releaseButtonStart')}\n            </MicRecorderTextP>\n          )\n\n          : (\n            <MicRecorderTextP\n              show\n            >\n              {t('recordingsIntroduction:shortRecording')}\n            </MicRecorderTextP>\n          )}\n      </MicRecorderTimerReleaseTextContainer>\n      <MicRecorderButton\n        disabled={!micAllowed}\n        onClick={recordingInProgress ? handleStopRecording : handleStartRecording}\n        onMouseDown={handleStartLongPress}\n        onMouseUp={handleEndLongPress}\n        onTouchStart={handleStartLongPress}\n        onTouchEnd={handleEndLongPress}\n        onMouseLeave={handleEndLongPress}\n      >\n        <MicRecorderStartImage\n          src={StartSVG}\n          alt=\"Start\"\n          show={!recordingInProgress}\n        />\n        <MicRecorderStopImage\n          src={StopSVG}\n          alt=\"Stop\"\n          show={recordingInProgress}\n        />\n      </MicRecorderButton>\n      <MicRecorderTimerContainer>\n        <Timer\n          ref={timerRef}\n          startImmediately={false}\n          checkpoints={[\n            {\n              time: maxTimeInSeconds * 1000,\n              callback: handleStopRecording,\n            },\n          ]}\n        >\n          <Timer.Minutes />\n          :\n          <Timer.Seconds formatValue={handleFormatValue} />\n        </Timer>\n      </MicRecorderTimerContainer>\n    </MicRecorderContainer>\n  );\n};\n\nexport default React.memo(MicRecorder);\n","export default __webpack_public_path__ + \"static/media/upload.21eec1c7.svg\";","import React from 'react';\nimport usePortal from 'react-useportal';\nimport { useTranslation, Trans } from 'react-i18next';\n\n// Form\nimport { Controller, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n\n// Components\nimport MicRecorder from 'components/MicRecorder';\nimport WizardButtons from 'components/WizardButtons';\n\n// Images\nimport UploadSVG from 'assets/icons/upload.svg';\n\n// Styles\nimport {\n  MainContainer,\n  UploadContainer,\n  UploadImage,\n  UploadText,\n  Text,\n  MicContainer,\n  StopImg,\n} from './style';\n\nconst audioMaxSizeInMb = 5;\n\nconst schema = Yup.object({\n  recordingFile: Yup.mixed()\n    .required('ERROR.FILE_REQUIRED')\n    .test('fileSize', 'ERROR.FILE_SIZE', (value?: any) => {\n      if (value) {\n        const file = value as File;\n        const { size } = file;\n        return (size <= 1024 ** 3 * audioMaxSizeInMb);\n      }\n      return !!value;\n    })\n    .test('fileDuration', 'ERROR.FILE_DURATION', async (value?: any) => {\n      if (value) {\n        const file = value as File;\n        const audio = new Audio(URL.createObjectURL(file));\n\n        audio.load();\n        await new Promise(resolver => audio.addEventListener('loadedmetadata', resolver));\n        return (audio.duration >= 3);\n      }\n      return !!value;\n    }),\n}).defined();\n\nexport type RecordType = Yup.InferType<typeof schema>;\n\ninterface RecordProps {\n  onNext: (values: RecordType) => void,\n  onManualUpload: () => void,\n  defaultValues: RecordType,\n  currentLogic: string,\n  action:any,\n}\n\nconst Record = ({\n  onNext,\n  onManualUpload,\n  defaultValues,\n  currentLogic,\n  action,\n}: RecordProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo:\n      document && (document.getElementById('wizard-buttons') as HTMLDivElement),\n  });\n  const {\n    handleSubmit, control, getValues, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues,\n    resolver: yupResolver(schema),\n  });\n  const { t } = useTranslation();\n\n  const { isValid } = formState;\n\n  // Refs\n  const micKey = React.useRef<number>(1);\n\n  const onManualUploadWithFile = () => {\n    action({\n      [currentLogic]: {\n        recordingFile: getValues('recordingFile') || null,\n        uploadedFile: null,\n      },\n    });\n    onManualUpload?.();\n  };\n\n  return (\n    <>\n      <MainContainer>\n        <Text>\n          <Trans i18nKey=\"recordingsRecord:text\">\n            Click the record button and cough intentionally <strong>3 times</strong>. When you are done,\n            click <StopImg /> and Continue.\n          </Trans>\n        </Text>\n        <MicContainer>\n          <Controller\n            control={control}\n            name=\"recordingFile\"\n            render={({ onChange }) => (\n              <MicRecorder\n                key={micKey.current} // On delete, easy re-mount a new mic recorder\n                onNewRecord={onChange}\n                recordingFile={defaultValues?.recordingFile}\n              />\n            )}\n          />\n        </MicContainer>\n\n        <Portal>\n          <WizardButtons\n            invert\n            leftLabel={t('recordingsRecord:next')}\n            leftDisabled={!isValid}\n            leftHandler={handleSubmit(onNext)}\n          />\n          {/* Upload Container */}\n          <UploadContainer onClick={onManualUploadWithFile}>\n            <UploadImage src={UploadSVG} />\n            <UploadText>{t('recordingsRecord:upload')}</UploadText>\n          </UploadContainer>\n        </Portal>\n      </MainContainer>\n    </>\n  );\n};\n\nexport default React.memo(Record);\n","export default __webpack_public_path__ + \"static/media/stop.ae8458c1.svg\";","import styled from 'styled-components';\nimport { BlackText } from 'components/Texts';\nimport { colors } from 'theme';\n\nimport StopSVG from 'assets/icons/stop.svg';\n\nexport const MainContainer = styled.div`\n  padding: 40px 0px;\n`;\n\nexport const Text = styled(BlackText)`\n  color: ${props => props.theme.colors.darkBlack};\n  margin-bottom: 2px;\n  text-align: left;\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n    margin: 0 auto;\n    font-size: 16px;\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    @media (orientation: portrait) {\n      margin-bottom: 248px;\n    }\n\n    @media (orientation: landscape) {\n      margin-bottom: 24px;\n    }\n  }\n`;\n\nexport const MicContainer = styled.div``;\n\nexport const UploadContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px 20px;\n  margin: 20px auto;\n  width: fit-content;\n\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    padding: 0px 22px;\n    margin: 22px auto;\n  }\n`;\n\nexport const UploadImage = styled.img`\n  cursor: pointer;\n  width: 13px;\n  height: 12px;\n  margin-right: 7px;\n`;\n\nexport const UploadText = styled.div`\n  cursor: pointer;\n  font-family: Source Sans Pro;\n  font-weight: bold;\n  font-size: 0.75rem;\n  line-height: 24px;\n  color: ${colors.darkBlack};\n`;\n\nexport const StopImg = styled.img.attrs(() => ({ src: StopSVG }))`\n  display: inline;\n  height: 10px;\n  margin: 0px 2px 4px;\n`;\n","/* eslint-disable no-plusplus */\n/* eslint-disable no-param-reassign */\n\nconst sizeAsHuman = (bytes: number, si?: boolean) => {\n  const thresh = si ? 1000 : 1024;\n  if (Math.abs(bytes) < thresh) {\n    return `${bytes} B`;\n  }\n  const units = si\n    ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n  let u = -1;\n  do {\n    bytes /= thresh;\n    ++u;\n  } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n  return `${bytes.toFixed(1)} ${units[u]}`;\n};\n\nconst blobToFile = (theBlob: Blob, fileName:string): File => {\n  const b: any = theBlob;\n  // A Blob() is almost a File() - it's just missing the two properties below which we will add\n  b.lastModifiedDate = new Date();\n  b.name = fileName;\n\n  // Cast to a File() type\n  return theBlob as File;\n};\n\nexport default {\n  sizeAsHuman,\n  blobToFile,\n};\n"],"sourceRoot":""}