{"version":3,"sources":["hooks/useHeaderContext.ts","helper/scrollHelper.ts","components/Button/style.ts","components/Button/Button.tsx","components/WizardButtons/style.ts","components/WizardButtons/WizardButtons.tsx","utils/wizard.ts","containers/SubmitSteps/Submission/PredictionResult/PredictionResult.tsx","containers/SubmitSteps/Submission/PredictionResult/index.ts"],"names":["useHeaderContext","React","useContext","HeaderContext","title","setTitle","setDoGoBack","doGoBack","scrollToTop","window","scrollTo","top","behavior","StyledButton","styled","button","dark","color","disabled","colors","midGray","darkBlack","white","Button","memo","children","props","type","WizardButtonsContainer","div","theme","layout","generalPaddingAmount","breakpoints","tablet","WizardButtons","invert","leftLabel","leftDisabled","leftHandler","rightLabel","rightDisabled","rightHandler","onClick","updateAction","storeKey","state","payload","resetStore","welcome","language","PredictionResult","Portal","usePortal","bindTo","document","getElementById","history","useHistory","t","useTranslation","useStateMachine","actions","useState","submitError","setSubmitError","processing","setProcessing","likelihood","setLikelihood","useEffect","target","style","display","handleStartAgain","useCallback","replace","handleSubmit","a","recordYourCough","body","FormData","coughFile","recordingFile","uploadedFile","append","name","accessCode","axios","post","process","headers","predictionResult","data","result","prediction","console","log","i18nKey","to"],"mappings":"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","file":"static/js/13.995e129c.chunk.js","sourcesContent":["import React from 'react';\nimport { HeaderContext } from 'components/Header';\n\nconst useHeaderContext = () => {\n  const {\n    title, setTitle, setDoGoBack, doGoBack,\n  } = React.useContext(HeaderContext);\n\n  return {\n    title,\n    setTitle,\n    doGoBack,\n    setDoGoBack,\n  };\n};\n\nexport default useHeaderContext;\n","export const scrollToTop = function scrollToTop() {\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n};\n\nexport const scrollToBottom = function scrollToBottom() {\n  window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n};\n","import styled from 'styled-components';\nimport { colors } from '../../theme';\n\nexport interface StyledButtonProps {\n  disabled?: boolean;\n  dark?: boolean;\n  id?: string;\n}\n\nexport const StyledButton = styled.button<StyledButtonProps>`\n  height: 50px;\n  border-radius: 4px; \n  font-family: 'Source Sans Pro'; /* It could be removed if default on body changes */\n  font-weight: bold;\n  font-size: 14px;\n  font-weight: bold;\n  width: 100%;\n\n  ${({ dark, disabled }) => {\n    const color = disabled ? colors.midGray : colors.darkBlack;\n    return dark ? `\n    background-color: ${color};\n    color: ${colors.white};\n    border: none;\n  ` : `\n    background-color: ${colors.white};\n    color: ${color};\n    border: 1px solid ${color};\n  `;\n  }}\n`;\n","import React, { PropsWithChildren } from 'react';\n\n// Styles\nimport {\n  StyledButton,\n  StyledButtonProps,\n} from './style';\n\nexport interface ButtonProps extends PropsWithChildren<StyledButtonProps> {\n  onClick?: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void);\n}\n\nconst Button = React.memo(({ children, ...props }: ButtonProps) => ((\n  <StyledButton\n    type=\"button\"\n    {...props}\n  >\n    {children}\n  </StyledButton>\n)));\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const WizardButtonsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-width: ${props => `calc(100% - ${props.theme.layout.generalPaddingAmount * 2}px)`};\n  margin: 0 auto;\n\n  button {\n    flex: 1;\n\n    &:first-of-type {\n      margin-left: 0px !important;\n    }\n\n    &:last-of-type {\n      margin-left: 20px;\n    }\n  }\n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    max-width: 470px;\n  }\n`;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\n\n// Components\nimport Button from 'components/Button';\n\n// Styles\nimport {\n  WizardButtonsContainer,\n} from './style';\n\ninterface WizardButtonsProps {\n  invert?: boolean;\n  leftLabel: string;\n  leftDisabled?: boolean;\n  leftHandler: () => void;\n  rightLabel?: string;\n  rightDisabled?: boolean;\n  rightHandler?: () => void;\n}\n\nconst WizardButtons = React.memo(({\n  invert = false,\n  leftLabel,\n  leftDisabled,\n  leftHandler,\n  rightLabel,\n  rightDisabled,\n  rightHandler,\n}: WizardButtonsProps) => (\n  <WizardButtonsContainer>\n    <Button\n      dark={invert}\n      disabled={leftDisabled}\n      onClick={leftHandler}\n    >\n      {leftLabel}\n    </Button>\n    {\n        rightLabel && rightHandler && (\n          <Button\n            dark={!invert}\n            disabled={rightDisabled}\n            onClick={rightHandler}\n          >\n            {rightLabel}\n          </Button>\n        )\n      }\n  </WizardButtonsContainer>\n));\nexport default React.memo(WizardButtons);\n","// TODO: Improve types\nexport function updateAction(storeKey: string): any {\n  return (state: any, payload: any) => ({\n    ...state,\n    [storeKey]: {\n      ...state[storeKey],\n      ...payload,\n    },\n  });\n}\n\nexport function resetStore(): any {\n  return (state: any) => ({ welcome: { language: state.welcome.language } });\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation, Trans } from 'react-i18next';\nimport axios from 'axios';\n\n// Form\nimport { useStateMachine } from 'little-state-machine';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\nimport Link from 'components/Link';\n\n// Update Action\nimport { resetStore } from 'utils/wizard';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\n\n// Styles\nimport {\n  Title,\n  ImageProcessing,\n  ProcessingContainer,\n  PredictionResultContainer,\n  TitleResult,\n  ImagePredictionResult,\n  LikelihoodText,\n  LikelihoodPercentageText,\n  SubmitError,\n  IntroText,\n} from './style';\n\nconst predictionEndpointUrl = process.env.REACT_APP_PREDICTION_ENDPOINT || '';\n\nconst PredictionResult = () => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, actions } = useStateMachine({ resetStore: resetStore() });\n\n  // States\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [processing, setProcessing] = React.useState<boolean>(true);\n  const [likelihood, setLikelihood] = React.useState<string>();\n\n  React.useEffect(() => {\n    // Hide the Footer Report Problems while processing\n    const target = document && document.getElementById('footer-report-problems');\n    if (target) {\n      if (processing) {\n        target.style.display = 'none';\n      } else {\n        target.style.display = 'flex';\n      }\n    }\n  }, [processing]);\n\n  // Handlers\n  const handleStartAgain = React.useCallback(() => {\n    history.replace('');\n  }, [history]);\n\n  const handleSubmit = async () => {\n    try {\n      setSubmitError(null);\n      if (state && state.welcome && state['submit-steps']) {\n        const {\n          recordYourCough,\n        } = state['submit-steps'];\n\n        const body = new FormData();\n\n        // Records\n        const coughFile = recordYourCough?.recordingFile || recordYourCough?.uploadedFile;\n        if (coughFile) {\n          body.append('cough', coughFile, coughFile.name || 'filename.wav');\n        }\n\n        body.append('accessCode', state.welcome?.accessCode ?? '');\n\n        // Restart\n        actions.resetStore({});\n\n        const predictionResult = await axios.post(predictionEndpointUrl, body, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        if (predictionResult.data && ('prediction' in predictionResult.data)) {\n          setProcessing(false);\n          const result = predictionResult.data.prediction;\n          setLikelihood(`${result}`);\n          // setLikelihood(t('predictionResult:result', { context: result, defaultValue: result }));\n        } else {\n          setProcessing(false);\n          setLikelihood('Your likelihood of COVID is XX%');\n        }\n      } else {\n        handleStartAgain();\n      }\n    } catch (error) {\n      console.log('Error', error);\n      setSubmitError(t('beforeSubmit:submitError'));\n    }\n  };\n\n  // Effects\n  React.useEffect(() => {\n    scrollToTop();\n    setTitle('');\n    setDoGoBack(() => {});\n    handleSubmit();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      {\n        processing ? (\n          <ProcessingContainer>\n            {/* Title */}\n            <Title>\n              {t('predictionResult:processingTitle')}\n            </Title>\n\n            {/* Image */}\n            <ImageProcessing />\n          </ProcessingContainer>\n        ) : (\n          <PredictionResultContainer>\n            {/* Title */}\n            <TitleResult>\n              {t('predictionResult:predictionResultTitle')}\n            </TitleResult>\n\n            <IntroText>\n              <Trans i18nKey=\"main:introductionText\">\n                <strong>Important note:</strong> This app is only for demonstration purposes and does not provide a\n                prediction. Please visit <Link to=\"https://virufy.org/study\" target=\"_blank\">Virufy Study</Link> to\n                contribute your cough and help us to complete this app.\n              </Trans>\n            </IntroText>\n\n            {/* Likelihood */}\n            {\n              likelihood && (\n                <LikelihoodText>\n                  <LikelihoodPercentageText>\n                    {likelihood}\n                  </LikelihoodPercentageText>\n                </LikelihoodText>\n              )\n            }\n\n            {/* Image */}\n            <ImagePredictionResult />\n          </PredictionResultContainer>\n        )\n      }\n\n      {/* Bottom Buttons */}\n      {\n        submitError && (\n          <SubmitError>\n            {submitError}\n          </SubmitError>\n        )\n      }\n      {\n        !processing && (\n          <Portal>\n            <WizardButtons\n              invert\n              leftLabel={t('predictionResult:nextButton')}\n              leftHandler={handleStartAgain}\n              leftDisabled={false}\n            />\n          </Portal>\n        )\n      }\n    </>\n  );\n};\n\nexport default React.memo(PredictionResult);\n","export { default } from './PredictionResult';\n"],"sourceRoot":""}