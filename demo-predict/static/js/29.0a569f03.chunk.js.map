{"version":3,"sources":["components/Layout/Layout.ts","components/Wizard/style.ts","components/Wizard/Wizard.tsx","containers/Welcome/Welcome.tsx"],"names":["Layout","styled","div","props","theme","layout","generalPaddingLeft","generalPaddingRight","breakpoints","tablet","WizardContainer","StepContainer","WizardNavControlPortal","AsyncLoad","loadable","container","fallback","cacheKey","Wizard","steps","children","match","useRouteMatch","location","useLocation","React","useState","loadSteps","setLoadSteps","pathList","useMemo","base","url","replace","map","step","path","useEffect","timing","duration","exact","Array","isArray","s","render","componentPath","id","memo","StoreKey","createStore","name","middleWares","storageType","window","localStorage","storeKey","nextStep","Welcome"],"mappings":"ghBAEA,IAeeA,EAfAC,UAAOC,IAAV,KAGM,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,sBAC3B,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,uBAExB,SAAAJ,GAAK,OAAIA,EAAMC,MAAMI,YAAYC,U,4TCNjD,IAAMC,EAAkBT,UAAOC,IAAV,KAOfS,EAAgBV,UAAOC,IAAV,KAIbU,EAAyBX,UAAOC,IAAV,KCW7BW,EAAYC,aAAS,gBAAGC,EAAH,EAAGA,UAAH,OAAmC,OAAO,YAAcA,MAAc,CAC/FC,SAAU,8CACVC,SAAU,qBAAGF,aAOf,IAAMG,EAAS,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,SACjBC,EAAQC,cACRC,EAAWC,cAF2D,EAG1CC,IAAMC,UAAS,GAH2B,mBAGrEC,EAHqE,KAG1DC,EAH0D,KAKtEC,EAAWJ,IAAMK,SAAQ,WAC7B,IAAMC,EAAiBV,EAAMW,IATnBC,QAAQ,MAAO,IAUzB,OAAOd,EAAMe,KAAI,SAAAC,GAAI,OAAIJ,EAAOI,EAAKC,UACpC,CAACf,EAAMW,IAAKb,IAMf,OAJAM,IAAMY,WAAU,WACdT,GAAa,KACZ,IAGD,cAAC,IAAD,UACE,eAAClB,EAAD,WACE,cAACC,EAAD,UAEIgB,GACE,cAAC,IAAD,CACEJ,SAAUA,EACVe,OAAO,cACPC,SAAU,IACVV,SAAUA,EAJZ,SAOIV,EAAMe,KAAI,SAAAC,GAAI,OACZ,cAAC,IAAD,CAEEK,OAAK,EACLJ,KAAMK,MAAMC,QAAQP,EAAKC,MACrBD,EAAKC,KAAKF,KAAI,SAAAS,GAAC,OAAKtB,EAAMe,KAAOO,KACjCtB,EAAMe,KAAOD,EAAKC,KACtBQ,OAAQ,kBACN,cAAC,EAAD,UACE,cAAC/B,EAAD,aACEE,UAAWoB,EAAKU,eACZV,EAAKhC,YATVgC,EAAKU,sBAqBxB,cAACjC,EAAD,CACEkC,GAAG,iBADL,SAGG1B,UAOIK,MAAMsB,KAAK7B,I,+FCrFpB8B,EAAW,UAEjBC,YAAY,eACTD,EAAW,IACX,CACDE,KAAM,eACNC,YAAa,GACbC,YAAaC,OAAOC,eAKtB,IAAMnC,EAAuB,CAC3B,CACEiB,KAAM,GACNS,cAAe,gBACf1C,MAAO,CACLoD,SAAUP,EAEVQ,SAAU,qCAiCVC,EAAU,kBACd,cAAC,IAAD,CAAQtC,MAAOA,KAGFM,cAAMsB,KAAKU","file":"static/js/29.0a569f03.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Layout = styled.div`\n  padding-top: 16px;\n  padding-bottom: 24px; \n  padding-left: ${props => props.theme.layout.generalPaddingLeft};\n  padding-right: ${props => props.theme.layout.generalPaddingRight}; \n\n  @media screen and (${props => props.theme.breakpoints.tablet}){\n    margin: auto;\n    padding: 0px 60px;\n\n    max-width: 768px;\n    width: 100%;\n  }\n`;\n\nexport default Layout;\n","import styled from 'styled-components';\n\nexport const WizardContainer = styled.div`\n  display: flex;\n  flex-direction:column;\n\n  height:100%;\n`;\n\nexport const StepContainer = styled.div`\n  height: 100%;\n`;\n\nexport const WizardNavControlPortal = styled.div`\n  margin-bottom: 24px;\n`;\n","import React from 'react';\nimport loadable from '@loadable/component';\nimport SlideRoutes from 'react-slide-routes';\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom';\nimport { StateMachineProvider } from 'little-state-machine';\n\n// Components\nimport Layout from 'components/Layout/';\n\n// Style\nimport {\n  WizardContainer,\n  StepContainer,\n  WizardNavControlPortal,\n} from './style';\n\ninterface WizardProps {\n  steps: Wizard.Step[];\n}\n\ninterface AsyncLoadProps extends Partial<Wizard.StepProps> {\n  container: string;\n}\n\nconst AsyncLoad = loadable(({ container }: AsyncLoadProps) => import(`containers/${container}`), {\n  fallback: <div>Loading ...</div>,\n  cacheKey: ({ container }: AsyncLoadProps) => container,\n});\n\nfunction clearPath(path: string) {\n  return path.replace(/\\/$/, '');\n}\n\nconst Wizard = ({ steps, children }: React.PropsWithChildren<WizardProps>) => {\n  const match = useRouteMatch();\n  const location = useLocation();\n  const [loadSteps, setLoadSteps] = React.useState(false);\n\n  const pathList = React.useMemo(() => {\n    const base = clearPath(match.url);\n    return steps.map(step => base + step.path);\n  }, [match.url, steps]);\n\n  React.useEffect(() => {\n    setLoadSteps(true);\n  }, []);\n\n  return (\n    <StateMachineProvider>\n      <WizardContainer>\n        <StepContainer>\n          {\n            loadSteps && (\n              <SlideRoutes\n                location={location}\n                timing=\"ease-in-out\"\n                duration={500}\n                pathList={pathList}\n              >\n                {\n                  steps.map(step => (\n                    <Route\n                      key={step.componentPath}\n                      exact\n                      path={Array.isArray(step.path)\n                        ? step.path.map(s => (match.path + s))\n                        : match.path + step.path}\n                      render={() => (\n                        <Layout>\n                          <AsyncLoad\n                            container={step.componentPath}\n                            {...step.props}\n                          />\n                        </Layout>\n\n                      )}\n                    />\n                  ))\n                }\n              </SlideRoutes>\n            )\n          }\n        </StepContainer>\n        <WizardNavControlPortal\n          id=\"wizard-buttons\"\n        >\n          {children}\n        </WizardNavControlPortal>\n      </WizardContainer>\n    </StateMachineProvider>\n  );\n};\n\nexport default React.memo(Wizard);\n","import React from 'react';\nimport { createStore } from 'little-state-machine';\n\n// Wizard\n// import { useRouteMatch, useLocation } from 'react-router-dom';\nimport Wizard from 'components/Wizard';\n// import DotIndicators from 'components/DotIndicators';\n\nconst StoreKey = 'welcome';\n\ncreateStore({\n  [StoreKey]: {},\n}, {\n  name: 'VirufyWizard',\n  middleWares: [],\n  storageType: window.localStorage,\n});\n\n// const baseUrl = '/welcome';\n\nconst steps: Wizard.Step[] = [\n  {\n    path: '',\n    componentPath: 'Welcome/Step1',\n    props: {\n      storeKey: StoreKey,\n      // nextStep: `${baseUrl}/step-2`,\n      nextStep: '/submit-steps/step-record/cough',\n    },\n  },\n  // {\n  //   path: '/step-2',\n  //   componentPath: 'Welcome/Step2',\n  //   props: {\n  //     storeKey: StoreKey,\n  //     previousStep: `${baseUrl}`,\n  //     nextStep: '/submit-steps/step-record/cough',\n  //   },\n  // },\n];\n\n// const Welcome = () => {\n//   // Hooks\n//   const location = useLocation();\n//   const match = useRouteMatch();\n\n//   const url = location.pathname.replace(match.url, '');\n//   const active = steps.findIndex(step => step.path === url);\n\n//   return (\n//     <Wizard\n//       steps={steps}\n//     >\n//       <DotIndicators\n//         current={active}\n//         total={steps.length}\n//       />\n//     </Wizard>\n//   );\n// };\nconst Welcome = () => (\n  <Wizard steps={steps} />\n);\n\nexport default React.memo(Welcome);\n"],"sourceRoot":""}