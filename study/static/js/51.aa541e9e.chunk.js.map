{"version":3,"sources":["containers/SubmitSteps/Questionary/Step5/Step5.tsx"],"names":["schema","Yup","currentRespiratoryCondition","required","defined","React","memo","previousStep","nextStep","storeKey","metadata","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","history","useHistory","t","useTranslation","useStateMachine","updateAction","state","action","useState","activeStep","setActiveStep","submitError","setSubmitError","captchaValue","setCaptchaValue","useForm","defaultValues","resolver","yupResolver","control","handleSubmit","errors","formState","handleDoBack","useCallback","push","goBack","useEffect","scrollToTop","onSubmit","values","a","current","total","doSubmit","s","currentStep","progressCurrent","totalSteps","progressTotal","bold","i18nKey","name","defaultValue","selected","other","render","onChange","value","v","items","label","allowAddOther","addOtherLabel","otherPlaceholder","excludableValue","invert","leftLabel","leftHandler"],"mappings":"uUAiCMA,EAASC,IAAW,CACxBC,4BAA6BD,MAAaE,aACzCC,UAuJYC,cAAMC,MAnJP,SAAC,GAKU,IAAD,IAJtBC,EAIsB,EAJtBA,aACAC,EAGsB,EAHtBA,SACAC,EAEsB,EAFtBA,SACAC,EACsB,EADtBA,SAGQC,EAAWC,IAAU,CAC3BC,OAAQC,UAAYA,SAASC,eAAe,oBADtCJ,OAFc,EAKYK,cAA1BC,EALc,EAKdA,YAAaC,EALC,EAKDA,SACfC,EAAUC,cACRC,EAAMC,cAAND,EAPc,EAQIE,YAAgBC,YAAaf,IAA/CgB,EARc,EAQdA,MAAOC,EARO,EAQPA,OARO,EAWcrB,IAAMsB,UAAS,GAX7B,mBAWfC,EAXe,KAWHC,EAXG,OAYgBxB,IAAMsB,SAAwB,MAZ9C,mBAYfG,EAZe,KAYFC,EAZE,OAakB1B,IAAMsB,SAAwB,MAbhD,mBAafK,EAbe,KAaDC,EAbC,OAkBlBC,YAAQ,CACVC,cAAa,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAAQhB,GACvB2B,SAAUC,YAAYrC,KAHtBsC,EAjBoB,EAiBpBA,QAASC,EAjBW,EAiBXA,aAKHC,GAtBc,EAiBGC,UAKjBD,OAEFE,GAAerC,IAAMsC,aAAY,WACrCd,GAAc,GACVtB,EACFY,EAAQyB,KAAKrC,GAEbY,EAAQ0B,WAET,CAAC1B,EAASZ,IAEbuC,qBAAU,WACRC,cACA7B,EAASG,EAAE,2BACXJ,GAAY,kBAAMyB,QACjB,CAACA,GAAczB,EAAaC,EAAUG,IAGzC,IAAM2B,GAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,0DACXD,EADW,oBAET,iBAACvC,QAAD,IAACA,OAAD,EAACA,EAAUyC,eAAX,QAAsB,MAAtB,iBAA8BzC,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAU0C,aAAxC,QAAiD,GAFxC,gCAGLC,YAAS,CACbtB,eAAgB,SAAAuB,GAAC,OAAIvB,EAAgBuB,EAAWjC,EAAEiC,GAAT,OACzC7B,QACAO,eACAN,SACAlB,WACAqB,gBACAV,YAVS,6BAaXO,EAAOuB,GACHzC,IACFqB,GAAc,GACdV,EAAQyB,KAAKpC,IAhBJ,2CAAH,sDAsBd,OACE,oCACE,kBAAC,IAAD,CAAmB+C,aAAqB,OAAR7C,QAAQ,IAARA,OAAA,EAAAA,EAAU8C,kBAAmB,EAAGC,YAAoB,OAAR/C,QAAQ,IAARA,OAAA,EAAAA,EAAUgD,gBAAiB,IAEvG,kBAAC,gBAAD,KAAgBrC,EAAE,wBAElB,kBAAC,eAAD,CAAcsC,MAAM,GAClB,kBAAC,IAAD,CAAOC,QAAQ,oCACb,oGADF,6BAIF,kBAAC,IAAD,CACEtB,QAASA,EACTuB,KAAK,8BACLC,aAAc,CAAEC,SAAU,GAAIC,MAAO,IACrCC,OAAQ,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAb,OACN,kBAAC,IAAD,CACEA,MAAOA,EACPD,SAAU,SAAAE,GAAC,OAAIF,EAASE,IACxBC,MAAO,CACL,CACEF,MAAO,SACPG,MAAOjD,EAAE,2CAEX,CACE8C,MAAO,aACPG,MAAOjD,EAAE,+CAEX,CACE8C,MAAO,gBACPG,MAAOjD,EAAE,8CAEX,CACE8C,MAAO,YACPG,MAAOjD,EAAE,8CAEX,CACE8C,MAAO,eACPG,MAAOjD,EAAE,iDAEX,CACE8C,MAAO,OACPG,MAAOjD,EAAE,0CAGbkD,eAAa,EACbC,cAAenD,EAAE,4CACjBoD,iBAAkBpD,EAAE,+CACpBqD,gBAAgB,YAKtB,2BAAG,kBAAC,IAAD,CAAclC,OAAQA,GAAQqB,KAAK,UACrCjC,GACC,kBAACjB,EAAD,KACGD,GACC,kBAAC,wBAAD,KACGA,EAASyC,QADZ,IACsB9B,EAAE,sBADxB,IACgDX,EAAS0C,QAG1D,iBAAC1C,QAAD,IAACA,OAAD,EAACA,EAAUyC,eAAX,QAAsB,MAAtB,iBAA8BzC,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAU0C,aAAxC,QAAiD,IAChD,kBAAC,IAAD,CAAWc,SAAUjC,IAEtBH,GACC,kBAAC,wBAAD,KACGA,GAGL,kBAAC,IAAD,CACE6C,QAAM,EACNC,UAAWvD,EAAE,0BACbwD,YAAatC,EAAaS","file":"static/js/51.aa541e9e.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation, Trans } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Components\nimport ProgressIndicator from 'components/ProgressIndicator';\nimport Recaptcha from 'components/Recaptcha';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\nimport { doSubmit } from 'helper/submitHelper';\n\n// Styles\nimport OptionList from 'components/OptionList';\nimport WizardButtons from 'components/WizardButtons';\nimport {\n  QuestionText, QuestionStepIndicator, GrayExtraInfo, TempBeforeSubmitError,\n} from '../style';\n\nconst schema = Yup.object({\n  currentRespiratoryCondition: Yup.object().required(),\n}).defined();\n\ntype Step5Type = Yup.InferType<typeof schema>;\n\nconst Step5 = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [captchaValue, setCaptchaValue] = React.useState<string | null>(null);\n\n  // Form\n  const {\n    control, handleSubmit, formState,\n  } = useForm({\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(schema),\n  });\n  const { errors } = formState;\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(t('questionary:headerText'));\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, t]);\n\n  // Handlers\n  const onSubmit = async (values: Step5Type) => {\n    if (values) {\n      if ((metadata?.current ?? 5) === (metadata?.total ?? 6)) {\n        await doSubmit({\n          setSubmitError: s => setSubmitError(!s ? null : t(s)),\n          state,\n          captchaValue,\n          action,\n          nextStep,\n          setActiveStep,\n          history,\n        });\n      } else {\n        action(values);\n        if (nextStep) {\n          setActiveStep(false);\n          history.push(nextStep);\n        }\n      }\n    }\n  };\n\n  return (\n    <>\n      <ProgressIndicator currentStep={metadata?.progressCurrent || 3} totalSteps={metadata?.progressTotal || 4} />\n\n      <GrayExtraInfo>{t('questionary:caption')}</GrayExtraInfo>\n\n      <QuestionText bold={false}>\n        <Trans i18nKey=\"questionary:respiration.question\">\n          <strong>Which of the below respiratory conditions do you currently have?</strong> (Select all that apply)\n        </Trans>\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"currentRespiratoryCondition\"\n        defaultValue={{ selected: [], other: '' }}\n        render={({ onChange, value }) => (\n          <OptionList\n            value={value}\n            onChange={v => onChange(v)}\n            items={[\n              {\n                value: 'asthma',\n                label: t('questionary:respiration.options.asthma'),\n              },\n              {\n                value: 'bronchitis',\n                label: t('questionary:respiration.options.bronchitis'),\n              },\n              {\n                value: 'copdEmphysema',\n                label: t('questionary:respiration.options.emphysema'),\n              },\n              {\n                value: 'pneumonia',\n                label: t('questionary:respiration.options.pneumonia'),\n              },\n              {\n                value: 'tuberculosis',\n                label: t('questionary:respiration.options.tuberculosis'),\n              },\n              {\n                value: 'none',\n                label: t('questionary:respiration.options.none'),\n              },\n            ]}\n            allowAddOther\n            addOtherLabel={t('questionary:respiration.options.addOther')}\n            otherPlaceholder={t('questionary:respiration.addOtherPlaceholder')}\n            excludableValue=\"none\"\n          />\n        )}\n      />\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n        <Portal>\n          {metadata && (\n            <QuestionStepIndicator>\n              {metadata.current} {t('questionary:stepOf')} {metadata.total}\n            </QuestionStepIndicator>\n          )}\n          {(metadata?.current ?? 5) === (metadata?.total ?? 6) && (\n            <Recaptcha onChange={setCaptchaValue} />\n          )}\n          {submitError && (\n            <TempBeforeSubmitError>\n              {submitError}\n            </TempBeforeSubmitError>\n          )}\n          <WizardButtons\n            invert\n            leftLabel={t('questionary:nextButton')}\n            leftHandler={handleSubmit(onSubmit)}\n          />\n        </Portal>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(Step5);\n"],"sourceRoot":""}