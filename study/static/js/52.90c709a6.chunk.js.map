{"version":3,"sources":["containers/SubmitSteps/Questionary/Step6/Step6.tsx"],"names":["schema","Yup","currentMedicalCondition","defined","React","memo","previousStep","nextStep","storeKey","metadata","Portal","usePortal","bindTo","document","getElementById","useHeaderContext","setDoGoBack","setTitle","history","useHistory","t","useTranslation","useStateMachine","updateAction","state","action","useState","activeStep","setActiveStep","useForm","defaultValues","resolver","yupResolver","control","handleSubmit","formState","errors","submitError","setSubmitError","captchaValue","setCaptchaValue","isSubmitting","useEffect","onSubmit","values","a","doSubmit","s","handleDoBack","useCallback","push","goBack","scrollToTop","currentStep","progressCurrent","totalSteps","progressTotal","bold","i18nKey","name","defaultValue","selected","other","render","onChange","value","v","items","label","allowAddOther","addOtherLabel","otherPlaceholder","excludableValue","current","total","invert","leftLabel","leftDisabled","leftHandler"],"mappings":"uUAiCMA,EAASC,IAAW,CACxBC,wBAAyBD,QACxBE,UAiLYC,cAAMC,MA7KP,SAAC,GAKU,IAJvBC,EAIsB,EAJtBA,aACAC,EAGsB,EAHtBA,SACAC,EAEsB,EAFtBA,SACAC,EACsB,EADtBA,SAGQC,EAAWC,IAAU,CAC3BC,OAAQC,UAAYA,SAASC,eAAe,oBADtCJ,OAFc,EAKYK,cAA1BC,EALc,EAKdA,YAAaC,EALC,EAKDA,SACfC,EAAUC,cACRC,EAAMC,cAAND,EAPc,EAQIE,YAAgBC,YAAaf,IAA/CgB,EARc,EAQdA,MAAOC,EARO,EAQPA,OARO,EAWcrB,IAAMsB,UAAS,GAX7B,mBAWfC,EAXe,KAWHC,EAXG,OAgBlBC,YAAQ,CACVC,cAAa,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAQhB,GACvBuB,SAAUC,YAAYhC,KAHtBiC,EAfoB,EAepBA,QAASC,EAfW,EAeXA,aAAcC,EAfH,EAeGA,UAKjBC,EAAWD,EAAXC,OApBc,EAuBgBhC,IAAMsB,SAAwB,MAvB9C,mBAuBfW,EAvBe,KAuBFC,EAvBE,OAwBkBlC,IAAMsB,SAAwB,MAxBhD,mBAwBfa,EAxBe,KAwBDC,EAxBC,KAyBdC,GAAiBN,EAAjBM,aAERC,qBAAU,WACHH,GACHD,EAAe,QAEhB,CAACC,IAEJ,IAAMI,GAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,0DACXD,EADW,gCAEPE,YAAS,CACbR,eAAgB,SAAAS,GAAC,OAAIT,EAAgBS,EAAW3B,EAAE2B,GAAT,OACzCvB,QACAe,eACAd,SACAlB,WACAqB,gBACAV,YATW,2CAAH,sDAgBR8B,GAAe5C,IAAM6C,aAAY,WACrCrB,GAAc,GACVtB,EACFY,EAAQgC,KAAK5C,GAEbY,EAAQiC,WAET,CAACjC,EAASZ,IAmBb,OAjBAoC,qBAAU,WACRU,cACAnC,EAASG,EAAE,2BACXJ,GAAY,kBAAMgC,QACjB,CAACA,GAAchC,EAAaC,EAAUG,IAcvC,oCACE,kBAAC,IAAD,CAAmBiC,aAAqB,OAAR5C,QAAQ,IAARA,OAAA,EAAAA,EAAU6C,kBAAmB,EAAGC,YAAoB,OAAR9C,QAAQ,IAARA,OAAA,EAAAA,EAAU+C,gBAAiB,IAEvG,kBAAC,gBAAD,KAAgBpC,EAAE,wBAElB,kBAAC,eAAD,CAAcqC,MAAM,GAClB,kBAAC,IAAD,CAAOC,QAAQ,gCACb,gGADF,6BAIF,kBAAC,IAAD,CACEzB,QAASA,EACT0B,KAAK,0BACLC,aAAc,CAAEC,SAAU,GAAIC,MAAO,IACrCC,OAAQ,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAb,OACN,kBAAC,IAAD,CACEA,MAAOA,EACPD,SAAU,SAAAE,GAAC,OAAIF,EAASE,IACxBC,MAAO,CACL,CACEF,MAAO,qBACPG,MAAOhD,EAAE,4CAEX,CACE6C,MAAO,yBACPG,MAAOhD,EAAE,gDAEX,CACE6C,MAAO,kCACPG,MAAOhD,EAAE,sCAEX,CACE6C,MAAO,iBACPG,MAAOhD,EAAE,wCAEX,CACE6C,MAAO,gCACPG,MAAOhD,EAAE,oCAEX,CACE6C,MAAO,oBACPG,MAAOhD,EAAE,0CAEX,CACE6C,MAAO,YACPG,MAAOhD,EAAE,0CAEX,CACE6C,MAAO,uBACPG,MAAOhD,EAAE,8CAEX,CACE6C,MAAO,OACPG,MAAOhD,EAAE,sCAGbiD,eAAa,EACbC,cAAelD,EAAE,wCACjBmD,iBAAkBnD,EAAE,2CACpBoD,gBAAgB,YAKtB,2BAAG,kBAAC,IAAD,CAAcpC,OAAQA,EAAQuB,KAAK,UACrChC,GACC,kBAACjB,EAAD,KACGD,GACC,kBAAC,wBAAD,KACGA,EAASgE,QADZ,IACsBrD,EAAE,sBADxB,IACgDX,EAASiE,OAI3D,kBAAC,IAAD,CAAWV,SAAUxB,IACpBH,GACD,kBAAC,wBAAD,KACGA,GAGH,kBAAC,IAAD,CACEsC,QAAM,EAENC,UAA0BxD,EAAfqB,GAAiB,yBAA8B,6BAC1DoC,cAAetC,GAAgBE,GAC/BqC,YAAa5C,EAAaS","file":"static/js/52.90c709a6.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { Trans, useTranslation } from 'react-i18next';\n\n// Form\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers';\nimport { ErrorMessage } from '@hookform/error-message';\nimport * as Yup from 'yup';\n\n// Update Action\nimport { updateAction } from 'utils/wizard';\n\n// Components\nimport ProgressIndicator from 'components/ProgressIndicator';\nimport Recaptcha from 'components/Recaptcha';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { scrollToTop } from 'helper/scrollHelper';\nimport { doSubmit } from 'helper/submitHelper';\n\n// Styles\nimport OptionList from 'components/OptionList';\nimport WizardButtons from 'components/WizardButtons';\nimport {\n  QuestionText, QuestionStepIndicator, GrayExtraInfo, TempBeforeSubmitError,\n} from '../style';\n\nconst schema = Yup.object({\n  currentMedicalCondition: Yup.object(),\n}).defined();\n\ntype Step6Type = Yup.InferType<typeof schema>;\n\nconst Step6 = ({\n  previousStep,\n  nextStep,\n  storeKey,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const { setDoGoBack, setTitle } = useHeaderContext();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const { state, action } = useStateMachine(updateAction(storeKey));\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n\n  // Form\n  const {\n    control, handleSubmit, formState,\n  } = useForm({\n    defaultValues: state?.[storeKey],\n    resolver: yupResolver(schema),\n  });\n  const { errors } = formState;\n\n  /* Delete after Contact info step is re-integrated */\n  const [submitError, setSubmitError] = React.useState<string | null>(null);\n  const [captchaValue, setCaptchaValue] = React.useState<string | null>(null);\n  const { isSubmitting } = formState;\n\n  useEffect(() => {\n    if (!captchaValue) {\n      setSubmitError(null);\n    }\n  }, [captchaValue]);\n\n  const onSubmit = async (values: Step6Type) => {\n    if (values) {\n      await doSubmit({\n        setSubmitError: s => setSubmitError(!s ? null : t(s)),\n        state,\n        captchaValue,\n        action,\n        nextStep,\n        setActiveStep,\n        history,\n      });\n    }\n  };\n\n  /*  */\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(t('questionary:headerText'));\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setTitle, t]);\n\n  // Handlers\n  // const onSubmit = async (values: Step6Type) => {\n  //   if (values) {\n  //     action(values);\n  //     if (nextStep) {\n  //       setActiveStep(false);\n  //       history.push(nextStep);\n  //     }\n  //   }\n  // };\n\n  return (\n    <>\n      <ProgressIndicator currentStep={metadata?.progressCurrent || 3} totalSteps={metadata?.progressTotal || 4} />\n\n      <GrayExtraInfo>{t('questionary:caption')}</GrayExtraInfo>\n\n      <QuestionText bold={false}>\n        <Trans i18nKey=\"questionary:medical.question\">\n          <strong>Which of the below medical conditions do you currently have?</strong> (Select all that apply)\n        </Trans>\n      </QuestionText>\n      <Controller\n        control={control}\n        name=\"currentMedicalCondition\"\n        defaultValue={{ selected: [], other: '' }}\n        render={({ onChange, value }) => (\n          <OptionList\n            value={value}\n            onChange={v => onChange(v)}\n            items={[\n              {\n                value: 'chronicLungDisease',\n                label: t('questionary:medical.options.chronicLung'),\n              },\n              {\n                value: 'congestiveHeartFailure',\n                label: t('questionary:medical.options.congestiveHeart'),\n              },\n              {\n                value: 'coughFromOtherMedicalConditions',\n                label: t('questionary:medical.options.cough'),\n              },\n              {\n                value: 'extremeObesity',\n                label: t('questionary:medical.options.obesity'),\n              },\n              {\n                value: 'hivAidsOrImpairedImmuneSystem',\n                label: t('questionary:medical.options.hiv'),\n              },\n              {\n                value: 'pulmonaryFibrosis',\n                label: t('questionary:medical.options.pulmonary'),\n              },\n              {\n                value: 'pregnancy',\n                label: t('questionary:medical.options.pregnancy'),\n              },\n              {\n                value: 'valvularHeartDisease',\n                label: t('questionary:medical.options.valvularHeart'),\n              },\n              {\n                value: 'none',\n                label: t('questionary:medical.options.none'),\n              },\n            ]}\n            allowAddOther\n            addOtherLabel={t('questionary:medical.options.addOther')}\n            otherPlaceholder={t('questionary:medical.addOtherPlaceholder')}\n            excludableValue=\"none\"\n          />\n        )}\n      />\n      {/* Bottom Buttons */}\n      <p><ErrorMessage errors={errors} name=\"name\" /></p>\n      {activeStep && (\n        <Portal>\n          {metadata && (\n            <QuestionStepIndicator>\n              {metadata.current} {t('questionary:stepOf')} {metadata.total}\n            </QuestionStepIndicator>\n          )}\n          { /* ReCaptcha  */}\n          <Recaptcha onChange={setCaptchaValue} />\n          {submitError && (\n          <TempBeforeSubmitError>\n            {submitError}\n          </TempBeforeSubmitError>\n          )}\n          <WizardButtons\n            invert\n            // leftLabel={t('questionary:proceedButton')}\n            leftLabel={isSubmitting ? t('questionary:submitting') : t('beforeSubmit:submitButton')}\n            leftDisabled={!captchaValue || isSubmitting}\n            leftHandler={handleSubmit(onSubmit)}\n          />\n        </Portal>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(Step6);\n"],"sourceRoot":""}